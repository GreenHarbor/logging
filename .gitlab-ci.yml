# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - Static Analysis
  - Test
  - Release
  - Deploy

lint:
  stage: Static Analysis
  image: node:latest
  script:
    - npm install
    - npm run lint

test:
  stage: Test
  image: node:latest
  script:
    - npm install
    - npm run test

release-image:
  stage: Release
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # RETRIEVE ALL IMAGES
    - docker pull $CI_REGISTRY_IMAGE -a
    # FIND LATEST TAG
    - TAG=$(docker images --format "{{.Tag}}" | sort -r -n | head -1)
    - last_element=$(echo "$TAG" | cut -d'.' -f3)
    - previous_elements=$(echo "$TAG" | cut -d'.' -f1-2)
    - incremented_last_element=$((last_element + 1))
    - NEW_TAG="$previous_elements.$incremented_last_element"
    - echo $NEW_TAG
    # BUILD IMAGE WITH COMMIT SHA
    - docker build . -t "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker push "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker build . -t "$CI_REGISTRY_IMAGE:latest"
    # PUSH IMAGE COMMIT SHA and LATEST
    - docker push "$CI_REGISTRY_IMAGE:latest"

publish:
  stage: Deploy
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  variables:
    APP_NAME: logging
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE
    - docker tag "$CI_REGISTRY_IMAGE:latest" "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - echo $CI_AWS_ECR_URI
    - echo "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $CI_AWS_ECR_URI
    - docker push "$CI_AWS_ECR_URI/$APP_NAME:latest"



